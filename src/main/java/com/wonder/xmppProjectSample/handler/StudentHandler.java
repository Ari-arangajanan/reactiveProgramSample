package com.wonder.xmppProjectSample.handler;import com.wonder.xmppProjectSample.model.Student;import com.wonder.xmppProjectSample.service.StudentService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.MediaType;import org.springframework.stereotype.Service;import org.springframework.web.reactive.function.server.ServerRequest;import org.springframework.web.reactive.function.server.ServerResponse;import reactor.core.publisher.Flux;import reactor.core.publisher.Mono;import java.time.Duration;@Servicepublic class StudentHandler {    @Autowired    private StudentService studentService;    public Mono<ServerResponse> getAllStudents(ServerRequest serverRequest) {        Long start = System.currentTimeMillis();        Flux<Student> list = Flux.range(1, 20)                .delayElements(Duration.ofSeconds(1))                .doOnNext(i -> System.out.println("student rex:" + i))                .map(i -> new Student(i, "student: " + i));        Long end = System.currentTimeMillis();        System.out.println("time delay " + (end - start));//        Mono<List<Student>> routOut = studentService.getStudentStream();        return ServerResponse.ok().body(list, Student.class);//        Flux<String> students = Flux.just("John Doe", "Jane Doe", "Jim Doe");//        return ServerResponse.ok().body(students, Student.class);    }    public Mono<ServerResponse> getStreamStudent(ServerRequest serverRequest) {        Long start = System.currentTimeMillis();        Flux<Student> list = Flux.range(1, 20)                .delayElements(Duration.ofSeconds(1))                .doOnNext(i -> System.out.println("student rex:" + i))                .map(i -> new Student(i, "student: " + i));        Long end = System.currentTimeMillis();        System.out.println("time delay " + (end - start));        return ServerResponse.ok()                .contentType(MediaType.TEXT_EVENT_STREAM)                .body(list, Student.class);    }    public Mono<ServerResponse> getStudent(ServerRequest serverRequest) {        String id = serverRequest.pathVariable("id");        Flux<Student> list = Flux.range(1, 20)                .delayElements(Duration.ofSeconds(1))                .doOnNext(i -> System.out.println("student rex:" + i))                .map(i -> new Student(i, "student: " + i));        Mono<Student> student = list.filter(std-> std.getId() == Integer.parseInt(id)).next();        return ServerResponse.ok().body(student, Student.class);    }    public Mono<ServerResponse> saveStudent(ServerRequest serverRequest) {        Mono<Student> body = serverRequest.bodyToMono(Student.class);        Mono<Student> studentObj = body.map(student -> student);        return ServerResponse.ok().body(studentObj, Student.class);    }}